[{"C:\\Users\\kedar\\Documents\\cod\\client\\src\\index.js":"1","C:\\Users\\kedar\\Documents\\cod\\client\\src\\App.js":"2"},{"size":313,"mtime":1609524601703,"results":"3","hashOfConfig":"4"},{"size":5475,"mtime":1609527852497,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1hq41lo",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\kedar\\Documents\\cod\\client\\src\\index.js",[],["12","13"],"C:\\Users\\kedar\\Documents\\cod\\client\\src\\App.js",["14","15"],"import React, { Component } from 'react';\nimport {\n  Grid,\n  GridItem,\n  CSSReset,\n  Box,\n  Text,\n  Stack,\n  Flex,\n  Heading,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n  Table, Thead, Tbody, Tr, Th, Td, TableCaption\n} from '@chakra-ui/react'\n\nconst maybePluralize = (count, noun, suffix = 's') =>\n  `${count} ${noun}${count !== 1 ? suffix : ''}`;\n\nconst modeToString = {\n  'br_brduos': 'Duos',\n  'br_brquads': 'Quads',\n  'br_mini_rebirth_mini_royale_quads': 'Mini Rebirth Royale Quads',\n}\n\nconst gameTypeToString = {\n  'wz': 'Warzone',\n}\n\nfunction MatchStats(props) {\n  return (\n    <GridItem>\n        <Box\n          backgroundColor=\"white\"\n          borderRadius=\"lg\"\n          shadow=\"sm\"\n          border=\"1px solid lightgrey\"\n          pl={3}\n          pr={3}\n          pt={5}\n          pb={5}\n        >\n          <Flex\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"flex-start\"\n            justifyContent=\"flex-start\"\n            mb={2}\n            pl={4}\n          >\n            <Heading\n              size=\"md\"\n              as=\"h2\"\n              lineHeight=\"shorter\"\n              fontWeight=\"bold\"\n              fontFamily=\"heading\"\n            >\n              {modeToString[props.matchData[Object.keys(props.matchData)[0]].mode] || props.matchData[Object.keys(props.matchData)[0]].mode}\n              <Text color=\"gray.500\" fontSize=\"md\">({gameTypeToString[props.matchData[Object.keys(props.matchData)[0]].gameType] || props.matchData[Object.keys(props.matchData)[0]].gameType})</Text>\n            </Heading>\n          </Flex>\n          <Stack shouldWrapChildren spacing={5} mt={4}>\n            <Accordion allowToggle>\n              {Object.entries(props.matchData).map(([key, value]) => {\n                return (\n                  <AccordionItem>\n                    <AccordionButton>\n                      <Box flex=\"1\" textAlign=\"left\">\n                        {key} ({maybePluralize(value.playerStats.kills, \"kill\", \"s\")})\n                        </Box>\n                      <AccordionIcon />\n                    </AccordionButton>\n                    <AccordionPanel pb={4}>\n                      <Table variant=\"simple\" size=\"sm\">\n                        <Thead>\n                          <Tr>\n                            <Th>Stat</Th>\n                            <Th>Entry</Th>\n                          </Tr>\n                        </Thead>\n                        <Tbody>\n                          <Tr>\n                            <Td>Kills</Td>\n                            <Td>{value.playerStats.kills}</Td>\n                          </Tr>\n                          <Tr>\n                            <Td>Assists</Td>\n                            <Td>{value.playerStats.assists}</Td>\n                          </Tr>\n                          <Tr>\n                            <Td>Deaths</Td>\n                            <Td>{value.playerStats.deaths}</Td>\n                          </Tr>\n                          <Tr>\n                            <Td>Damage Done</Td>\n                            <Td>{value.playerStats.damageDone}</Td>\n                          </Tr>\n                          <Tr>\n                            <Td>Damage Taken</Td>\n                            <Td>{value.playerStats.damageTaken}</Td>\n                          </Tr>\n                        </Tbody>\n                      </Table>\n                    </AccordionPanel>\n                  </AccordionItem>\n                )\n              })}\n            </Accordion>\n          </Stack>\n        </Box>\n\n\n    </GridItem>\n\n  );\n\n}\n\nclass App extends Component {\n  // Initialize the state\n  constructor(props) {\n    super(props);\n    this.state = {\n      matches: [],\n      players: [],\n    }\n  }\n\n  // Fetch the list on first mount\n  componentDidMount() {\n    this.getData();\n  }\n\n  // Retrieves the list of items from the Express app\n  getData = () => {\n    fetch('/api')\n      .then(res => res.json())\n      .then(data => this.setState({ 'matches': data['matches'], 'players': data['players'] }))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CSSReset />\n        <Flex\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          textAlign=\"center\"\n          mt={4}\n        >\n          <Flex\n            display=\"flex\"\n            flexDirection=\"row\"\n            alignItems=\"flex-start\"\n            justifyContent=\"flex-start\"\n          >\n            <Text fontSize=\"3xl\" fontWeight=\"bold\">⚡️Dub Squad Dashboard</Text>\n          </Flex>\n          <Text color=\"gray.500\">let's get dem dubs</Text>\n        </Flex>\n        <Grid templateColumns=\"repeat(auto-fit, minmax(300px, 1fr))\" gap={6} p={10}>\n          {/* Check to see if any items are found*/}\n          {this.state.matches ? (\n            <>\n              {/* Render the list of items */}\n              {Object.entries(this.state.matches).map((item) => {\n                let data = {};\n                item[1].map((player => {\n                  data[player] = this.state.players[player].matches.filter(match => match.matchID === item[0])[0];\n                }));\n                return (<MatchStats matchData={data} />)\n              })}\n            </>\n          ) : (\n              <div>\n                <h2>No Matches Found</h2>\n              </div>\n            )\n          }\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":16,"column":36,"nodeType":"22","messageId":"23","endLine":16,"endColumn":48},{"ruleId":"24","severity":1,"message":"25","line":172,"column":37,"nodeType":"26","messageId":"27","endLine":172,"endColumn":39},"no-native-reassign",["28"],"no-negated-in-lhs",["29"],"no-unused-vars","'TableCaption' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]